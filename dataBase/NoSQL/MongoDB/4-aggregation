# Aggregation operations process multiple documents and return computed results
# to perform aggregation operation you can use Aggregate Pipelines
"""
    An aggregation pipeline consists of one or more stages that process documents:

    Each stage performs an operation on the input documents. For example, a stage can
    filter documents, group documents, and calculate values.
    The documents that are output from a stage are passed to the next stage.
    An aggregation pipeline can return results for groups of documents. For example,
    return the total, average, maximum, and minimum values.
"""
# N.T
"""
    Aggregation pipelines run with the db.collection.aggregate() method do not modify documents 
    in a collection, unless the pipeline contains a $merge or $out stage.
"""
"""
    The following aggregation pipeline example contains two stages and returns the total order 
    quantity of medium size pizzas grouped by pizza name:
"""
db.order.aggregate([
    { $match: { size: "medium" } },
    {$group: { _id: "$name", totalQuantity: {$sum: "$quantity"}}}
])
"""
    The $match stage:
        Filters the pizza order documents to pizzas with a size of medium.
        Passes the remaining documents to the $group stage.
    The $group stage:
        Groups the remaining documents by pizza name.
    Uses $sum to calculate the total order quantity for each pizza name. The total is stored
    in the totalQuantity field returned by the aggregation pipeline.
"""

"""
    The following example calculates the total pizza order value and average order quantity 
    between two dates:
"""
db.orders.aggregate( [

   // Stage 1: Filter pizza order documents by date range
   {
      $match:
      {
         "date": { $gte: new ISODate( "2020-01-30" ), $lt: new ISODate( "2022-01-30" ) }
      }
   },

   // Stage 2: Group remaining documents by date and calculate results
   {
      $group:
      {
         _id: { $dateToString: { format: "%Y-%m-%d", date: "$date" } },
         totalOrderValue: { $sum: { $multiply: [ "$price", "$quantity" ] } },
         averageOrderQuantity: { $avg: "$quantity" }
      }
   },

   // Stage 3: Sort documents by totalOrderValue in descending order
   {
      $sort: { totalOrderValue: -1 }
   }

 ] )
"""
    The $match stage:
    Filters the pizza order documents to those in a date range specified using $gte and $lt.
    Passes the remaining documents to the $group stage.
    
    The $group stage:
    Groups the documents by date using $dateToString.
    For each group, calculates:
    Total order value using $sum and $multiply.
    Average order quantity using $avg.
    Passes the grouped documents to the $sort stage.
    
    The $sort stage:
    Sorts the documents by the total order value for each group in descending order (-1).
    
    Returns the sorted documents.
"""