"""
    in MongoDB A Database contains a collection,
    and a collection contains documents and the
    documents contain data, they are related to each other. 
"""
mongosh # starts mongo shell

"""
    in MongoDB, the database is actually created when you
    start entering data in that database, so if you used
    show command after creating the db you will not see the
    new database created
"""
# create database, collection
use db_name
show dbs
db.createCollection("collection_name")
show collections

# drop Database, collection
use db_name
db.dropDatabase()
db.collection_name.drop()   

# insert
db.school.insert({name: "Holberton school"})
db.collection_name.insertOne({...})
db.collection_name.insertMany([{}, {}, {}, ...])

# The field names (keys) are of strings.
# The _id field name is reserved to use as a primary key.
# When you create a collection MongoDB automatically creates a unique index on the _id field.
# The value of the _id field can be set by the user or by the system
# (if the user does not createan _id field, then the system will automatically
#  generate an ObjectId for _id field). 
# A single document may contain duplicate fields.
# The value of the _id field can be of any BSON type except arrays.
# Tip: When you paste data in the functions always use close parenthesis after
# pasting the data into the function. If you use close parenthesis before pasting
# data in the function, then you will get an error.
# to set the id your self add a value to the key insertedId ->
insertedId: "somevalue"

# Read
db.collection_name.find().pretty() # decorate result

# Updating
db.collection_name.updat()
db.collection_name.updateOne({name: "mostaf"}, {$set: {age: 22}})
db.school.update(
    {name: "Holberton school"},
    {$set: {address: "972 Mission street"}},
    {multi: true} # this to update all doc that matches with the criteria
                  # of -> name: Holberton school
)
db.collection_name.updateMany({}, {$set: {year: 2020}})
db.collection_name.replaceOne()

# Delete
db.collection_name.deleteOne({name: "mostafa"})
db.collection_name.deleteMany({name: "mostafa"}) # will delete all docs with name mostafa

# mongodb cursor https://www.geeksforgeeks.org/mongodb-cursor/
    # is a pointer that references the documents of the collection returned by the find() method.
db.student.find().pretty()
# This find() method returns a cursor containing all documents present in the student collection.
var mycursor = db.student.find({studentId:3}).pretty()
mycursor # will print only studentid = 3 data

#  next() cursor method to access the next document
var mycursor = db.student.find({studentId:{$gt:1}});
> while(mycursor.hasNext()){
... print(tojson(mycursor.next()));
... }
"""
    In this example, studentId 2 and 3 documents are displayed because, in the first line,
    we exclusively took the cursor to start with the studentId > 1. So it skipped 1st
    document and retrieved the remaining documents. Here, the print(tojson()) method
    is used to display the result. You can also use printjson() method to display the result.
"""

# forEach() method to iterate the cursor.
# This function applies a JavaScript function
# to each document from the cursor.
db.collection.find().forEach(<function>)
var mycursor = db.student.find({studentId:3}).pretty()
mycursor.forEach(printjson)
"""
    Here, first we store the cursor returned by the find()
    method(i.e., studentId:3) in the mycursor variable. Now,
    we use the forEach() method to iterate the cursor and
    display the resultant document using printjson.
"""
# you are allowed to iterate the cursor and display the resultant document in the array using the toArray() method.
var mycursor = db.student.find().pretty()
var docs = mycursor.toArray()
var resultdoc = docs[0]
resultdoc
"""
    Here, first, we assign the returned cursor to the var keyword(i.e. mycursor),
    in next we create an array from the resultant cursor using the toArray() method
    and assign the result to the var keyword(i.e. docs). Now we access the documents
    according to their index e.g. var resultdoc = docs[0], here we display a document whose index is 0.
"""
# You can also this method to access a document using index on the cursor.  
var mycursor = db.student.find().pretty()
var resultdoc = mycursor[0]
resultdoc

# cursor methods
# count() returns the total number of documents present in the given collection.
db.collection_name.find().count()
# limit() retch limited records from a collection
db.student.find().limit(2).pretty()
# sort() If you want to sort the documents in ascending, then set the value of
# the field to 1 and in descending, then set -1.
db.student.find().sort({studentId:-1}).pretty()
# next () method is used to return the next document in a cursor.
# Usually, it will return the first document as that will be the
#  result of the first document in the cursor.
db.student.find().next()

# dataTypes in Mongodb https://www.geeksforgeeks.org/datatypes-in-mongodb/
# string, int, double, boolean, null, Array[], object, objectId, undefined, Date

# Object
"""
    Object data type stores embedded documents. Embedded documents
    are also known as nested documents. Embedded document or nested
    documents are those types of documents which contain
    a document inside another document.
"""

# retrieve data
db.collection_name.find() # all
# find a single document using findOne() method, 
# This method returns the first document that matches
# the given filter query expression.
db.collection_name.findOne()
# $eq -> equal to operator
b.article.find({author:{$eq:"devil"}}).pretty()
# $gte -> greater than operator
# $lte -> lesser than operator
# $exists operator shows all the collection documents if they exist on a given key.
db.article.find({time:{$exists:"true"}}).pretty()
"""
    $and operator comes under the type of MongoDB logical operator which
    perform logical AND operation on the array of one or more expressions
    and select or retrieve only those documents that match all the given
    expression in the array.
"""
db.article.find({$and:[{level:{$eq:"high"}},{level:{$exists : "true"}}]}).pretty()
# $or 
"""
    Retrieve articles that are either authored by “Aditya” and have a level of “basic”,
    or authored by “Rakesh” with a level of “medium”.
"""
db.article.find({
  $or: [
    { level: "basic", author: "Aditya" },
    { $and: [
        { level: "medium" },
        { author: "Rakesh" }
      ]
    }
  ]
}).pretty()
# specify maximum number for a cursor to return
db. article. find({author : "devil" }). limit(2) . pretty()

def log_stats():
    """ log_stats.
    """
    client = MongoClient('mongodb://127.0.0.1:27017')
    logs_collection = client.logs.nginx
    total = logs_collection.count_documents({})
    get = logs_collection.count_documents({"method": "GET"})
    post = logs_collection.count_documents({"method": "POST"})
    put = logs_collection.count_documents({"method": "PUT"})
    patch = logs_collection.count_documents({"method": "PATCH"})
    delete = logs_collection.count_documents({"method": "DELETE"})
    path = logs_collection.count_documents(
        {"method": "GET", "path": "/status"})
    print(f"{total} logs")
    print("Methods:")
    print(f"method GET: {get}")
    print(f"method POST: {post}")
    print(f"method PUT: {put}")
    print(f"method PATCH: {patch}")
    print(f"method DELETE: {delete}")
    print(f"{path} status check")

# lists all documents with name starting by Holberton in the collection school
db.school.find({name: {$regex: /^Holberton/}})

def top_students(mongo_collection):
    """sort by average score
    """
    return mongo_collection.aggregate([
        {"$project": {
            "name": "$name",
            "averageScore": {"$avg": "$topics.score"}
        }},
        {"$sort": {"averageScore": -1}}
    ])

def log_stats():
    """ log_stats.
    """
    client = MongoClient('mongodb://127.0.0.1:27017')
    logs_collection = client.logs.nginx
    total = logs_collection.count_documents({})
    get = logs_collection.count_documents({"method": "GET"})
    post = logs_collection.count_documents({"method": "POST"})
    put = logs_collection.count_documents({"method": "PUT"})
    patch = logs_collection.count_documents({"method": "PATCH"})
    delete = logs_collection.count_documents({"method": "DELETE"})
    path = logs_collection.count_documents(
        {"method": "GET", "path": "/status"})
    print(f"{total} logs")
    print("Methods:")
    print(f"\tmethod GET: {get}")
    print(f"\tmethod POST: {post}")
    print(f"\tmethod PUT: {put}")
    print(f"\tmethod PATCH: {patch}")
    print(f"\tmethod DELETE: {delete}")
    print(f"{path} status check")
    print("IPs:")
    sorted_ips = logs_collection.aggregate(
        [{"$group": {"_id": "$ip", "count": {"$sum": 1}}},
         {"$sort": {"count": -1}}])
    i = 0
    for s in sorted_ips:
        if i == 10:
            break
        print(f"\t{s.get('_id')}: {s.get('count')}")
        i += 1


if __name__ == "__main__":
    log_stats()




if __name__ == "__main__":
    log_stats()