"""
    in MongoDB A Database contains a collection,
    and a collection contains documents and the
    documents contain data, they are related to each other. 
"""
mongo # starts mongo shell
show db
use db_name # create and use db
"""
    in MongoDB, the database is actually created when you
    start entering data in that database, so if you used
    show command after creating the db you will not see the
    new database created
"""
# this will make a new collection and insert an item
db.collection_name.insertOne({...})

# the key value pair
# The field names (keys) are of strings.
# The _id field name is reserved to use as a primary key.
# When you create a collection MongoDB automatically creates a unique index on the _id field.
# The value of the _id field can be set by the user or by the system
# (if the user does not createan _id field, then the system will automatically
#  generate an ObjectId for _id field). 
# A single document may contain duplicate fields.
# The value of the _id field can be of any BSON type except arrays.
# Tip: When you paste data in the functions always use close parenthesis after
# pasting the data into the function. If you use close parenthesis before pasting
# data in the function, then you will get an error.

# to set the id your self add a value to the key insertedId
insertedId: "somevalue"

# mongodb cursor
# is a pointer that references the documents of the collection returned by the find() method.
db.student.find().pretty()
# This find() method returns a cursor containing all documents present in the student collection.
var mycursor = db.student.find({studentId:3}).pretty()
mycursor # will print only studentid = 3 data

#  next() cursor method to access the next document
var mycursor = db.student.find({studentId:{$gt:1}});
> while(mycursor.hasNext()){
... print(tojson(mycursor.next()));
... }
"""
    In this example, studentId 2 and 3 documents are displayed because, in the first line,
    we exclusively took the cursor to start with the studentId > 1. So it skipped 1st
    document and retrieved the remaining documents. Here, the print(tojson()) method
    is used to display the result. You can also use printjson() method to display the result.
"""

# forEach() method to iterate the cursor.
# This function applies a JavaScript function
# to each document from the cursor.
db.collection.find().forEach(<function>)
var mycursor = db.student.find({studentId:3}).pretty()
mycursor.forEach(printjson)
"""
    Here, first we store the cursor returned by the find()
    method(i.e., studentId:3) in the mycursor variable. Now,
    we use the forEach() method to iterate the cursor and
    display the resultant document using printjson.
"""
# you are allowed to iterate the cursor and display the resultant document in the array using the toArray() method.
var mycursor = db.student.find().pretty()
var docs = mycursor.toArray()
var resultdoc = docs[0]
resultdoc
"""
    Here, first, we assign the returned cursor to the var keyword(i.e. mycursor),
    in next we create an array from the resultant cursor using the toArray() method
    and assign the result to the var keyword(i.e. docs). Now we access the documents
    according to their index e.g. var resultdoc = docs[0], here we display a document whose index is 0.
"""
# You can also this method to access a document using index on the cursor.  
var mycursor = db.student.find().pretty()
var resultdoc = mycursor[0]
resultdoc