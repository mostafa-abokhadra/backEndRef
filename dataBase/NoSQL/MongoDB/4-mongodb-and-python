# the standard MongoDB driver library for Python
python -m venv myenv
source env/bin/activate
python -m pip install "pymongo[srv]"

# create mongodb cluster from atlas

# creating the mongodb client
from pymongo import MongoClient
def get_database():
    connection_str = "atlasURLtoConnect"
    "mongodb+srv://user:pass@cluster.mongodb.net/myfirstDB"
    client = MongoClient(connection_str) 
    # Create the database
    # MongoDB doesn’t create a database until you have
    # collections and documents in it. 
    return client['user_shopping_list']

if __name__ == '__main__':
    dbname = get_database()

# To create a collection, pass the collection name to the database
from pymongo_get_database import get_database
dbname = get_database()
collection_name = dbname["user_1_items"]
# This creates a collection named user_1_items in the user_shopping_list database.
# to get a collection already in the database
collection = client.db_name.collection_name

# inserting
# for example you already have some python dictionaries
collection_name.insert_many([dict1, dict2])
collection_name.insert_one(dict3)

# to add date useing pyMongo we use dateutil package
python -m pip install python-dateutil

from dateutil import parser
expiry_date = '2021-07-13T00:00:00.000Z'
expiry = parser.parse(expiry_date)
# now you can use 'expiry' variable as the value of one of 
# your dictionary keys that you will add to the db

# to query and retrieve
from pymongo_get_database import get_database
dbname = get_database()
collection_name = dbname["user_1_items"]
item_details = collection_name.find()
for item in item_details:
    print(item)
# Although MongoDB gets the entire data, we
# can get a Python ‘KeyError’on the last document.
# find() method returns dictionary object
# to handle missing date errors in python we use pandas
# to convert that dictionary to a 'dataframe'
python -m pip install pandas 

from pandas import DataFrame
# then replace the above loop with
items_df = DataFrame(item_details)
print(items_df)
# the errors are replaced by NaN and NaT for the missing values

# indexing
# mongoDB defines indexes at the collection level
collection_name.find({"category" : "food"})
# To execute the above query, MongoDB has to scan all the documents.
# creating index
from pymongo_get_database import get_datbase
dbname = get_database()
collection_name = dbname["user_1_items"]
category_index =  collection_name.create_index("category")

"""
    PyMongo, the official MongoDB driver for Python, is indeed
    designed for synchronous operations. This means that when
    you use PyMongo, each operation blocks the execution of your
    code until it completes. However, this doesn't mean that
    MongoDB itself doesn't allow for asynchronous operations.
    
    MongoDB can be accessed asynchronously, but for that, you
    would need to use a different driver or library that supports
    asynchronous code. In Python, you can use `Motor`, which is
    an asynchronous driver built on top of PyMongo and is
    specifically designed to work with asynchronous frameworks
    like `asyncio` or `Tornado`.

    - PyMongo: Synchronous MongoDB operations.
    - Motor: Asynchronous MongoDB operations.

    so If you need to perform non-blocking MongoDB operations in
    an asynchronous Python application, `Motor` would be the
    appropriate choice.
"""

# to close db connection
clien.close()