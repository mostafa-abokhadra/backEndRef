# Redis stands for Remote Dictionary Server. You can use the same data types as in your local programming environment but on the server side within Redis.
# Redis can be used as a database, cache, streaming engine, message broker, and more
# it can be used ads a data structure store, document database, vector database

> redis-cli -h 127.0.0.1 -p 6379
> SET bike:1 "Process 134"
> GET bike:1

> HSET bike:1 model Deimos brand Ergonom type 'Enduro bikes' price 4972
(integer) 4
> HGET bike:1 model
"Deimos"
> HGET bike:1 price
"4972"
> HGETALL bike:1
1) "model"
2) "Deimos"
3) "brand"
4) "Ergonom"
5) "type"
6) "Enduro bikes"
7) "price"
8) "4972"

# keySpace
Redis keys are binary safe; this means that you can use any binary sequence as a key, from a string like "foo" to the content of a JPEG file. The empty string is also a valid key.

> set mykey hello
> type mykey # return the value type of the key
> exists mykey # return true if key exists in the database
> del mykey

# key expiration
Before moving on, we should look at an important Redis feature that works regardless of the type of value you're storing: key expiration. Key expiration lets you set a timeout for a key, also known as a "time to live", or "TTL". When the time to live elapses, the key is automatically destroyed.

A few important notes about key expiration:
They can be set both using seconds or milliseconds precision.
However the expire time resolution is always 1 millisecond.
Information about expires are replicated and persisted on disk, the time virtually passes when your Redis server remains stopped (this means that Redis saves the date at which a key will expire).

> set key some-value
> expire key 5
> get key # (immediately)
"some-value"
> get key # (after some time)
(nil)
